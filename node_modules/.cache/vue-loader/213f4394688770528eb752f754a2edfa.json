{"remainingRequest":"/Users/davislin/DavisLin/Case/metronic_v6.1.8/theme/vue/demo1/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/davislin/DavisLin/Case/metronic_v6.1.8/theme/vue/demo1/node_modules/vue-svg-inline-loader/dist/index.min.js!/Users/davislin/DavisLin/Case/metronic_v6.1.8/theme/vue/demo1/src/views/pages/Builder.vue?vue&type=template&id=25512086&","dependencies":[{"path":"/Users/davislin/DavisLin/Case/metronic_v6.1.8/theme/vue/demo1/src/views/pages/Builder.vue","mtime":1582074912000},{"path":"/Users/davislin/DavisLin/Case/metronic_v6.1.8/theme/vue/demo1/node_modules/cache-loader/dist/cjs.js","mtime":1581314282653},{"path":"/Users/davislin/DavisLin/Case/metronic_v6.1.8/theme/vue/demo1/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1588841263729},{"path":"/Users/davislin/DavisLin/Case/metronic_v6.1.8/theme/vue/demo1/node_modules/vuetify-loader/lib/loader.js","mtime":1588922639593},{"path":"/Users/davislin/DavisLin/Case/metronic_v6.1.8/theme/vue/demo1/node_modules/cache-loader/dist/cjs.js","mtime":1581314282653},{"path":"/Users/davislin/DavisLin/Case/metronic_v6.1.8/theme/vue/demo1/node_modules/vue-loader/lib/index.js","mtime":1588841263729},{"path":"/Users/davislin/DavisLin/Case/metronic_v6.1.8/theme/vue/demo1/node_modules/vue-svg-inline-loader/dist/index.min.js","mtime":1588922639533}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtbGlnaHQgYWxlcnQtZWxldmF0ZSIgcm9sZT0iYWxlcnQiPgogICAgPGRpdiBjbGFzcz0iYWxlcnQtaWNvbiBhbGVydC1pY29uLXRvcCI+CiAgICAgIDxpIGNsYXNzPSJmbGF0aWNvbi13YXJuaW5nIGt0LWZvbnQtYnJhbmQiPjwvaT4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iYWxlcnQtdGV4dCI+CiAgICAgIDxwPgogICAgICAgIFRoZSBsYXlvdXQgYnVpbGRlciBoZWxwcyB0byBjb25maWd1cmUgdGhlIGxheW91dCB3aXRoIHByZWZlcnJlZAogICAgICAgIG9wdGlvbnMgYW5kIHByZXZpZXcgaXQgaW4gcmVhbCB0aW1lLiBUaGUgY29uZmlndXJlZCBsYXlvdXQgb3B0aW9ucwogICAgICAgIHdpbGwgYmUgc2F2ZWQgdW50aWwgeW91IGNoYW5nZSBvciByZXNldCB0aGVtLiBUbyB1c2UgdGhlIGxheW91dAogICAgICAgIGJ1aWxkZXIgY2hvb3NlIHRoZSBsYXlvdXQgb3B0aW9ucyBhbmQgY2xpY2sgdGhlCiAgICAgICAgPGNvZGU+UHJldmlldzwvY29kZT4gYnV0dG9uIHRvIHByZXZpZXcgdGhlIGNoYW5nZXMuCiAgICAgIDwvcD4KICAgIDwvZGl2PgogIDwvZGl2PgoKICA8ZGl2IGNsYXNzPSJrdC1wb3J0bGV0IGt0LXBvcnRsZXQtLXRhYnMiPgogICAgPGRpdiBjbGFzcz0ia3QtcG9ydGxldF9faGVhZCI+CiAgICAgIDxkaXYgY2xhc3M9Imt0LXBvcnRsZXRfX2hlYWQtdG9vbGJhciI+CiAgICAgICAgPHVsCiAgICAgICAgICByZWY9ImJ1aWxkZXItdGFiIgogICAgICAgICAgY2xhc3M9Im5hdiBuYXYtdGFicyBuYXYtdGFicy1saW5lIG5hdi10YWJzLWJvbGQgbmF2LXRhYnMtbGluZS1sZWZ0IG5hdi10YWJzLWxpbmUtcHJpbWFyeSIKICAgICAgICAgIHJvbGU9InRhYmxpc3QiCiAgICAgICAgPgogICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgY2xhc3M9Im5hdi1saW5rIGFjdGl2ZSIKICAgICAgICAgICAgICB2LW9uOmNsaWNrPSJzZXRBY3RpdmVUYWIiCiAgICAgICAgICAgICAgZGF0YS10YWI9IjAiCiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9InRhYiIKICAgICAgICAgICAgICBocmVmPSIjIgogICAgICAgICAgICAgIHJvbGU9InRhYiIKICAgICAgICAgICAgICBhcmlhLXNlbGVjdGVkPSJ0cnVlIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgU2tpbnMKICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICA8YQogICAgICAgICAgICAgIGNsYXNzPSJuYXYtbGluayIKICAgICAgICAgICAgICB2LW9uOmNsaWNrPSJzZXRBY3RpdmVUYWIiCiAgICAgICAgICAgICAgZGF0YS10YWI9IjEiCiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9InRhYiIKICAgICAgICAgICAgICBocmVmPSIjIgogICAgICAgICAgICAgIHJvbGU9InRhYiIKICAgICAgICAgICAgICBhcmlhLXNlbGVjdGVkPSJmYWxzZSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIFBhZ2UKICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICA8YQogICAgICAgICAgICAgIGNsYXNzPSJuYXYtbGluayIKICAgICAgICAgICAgICB2LW9uOmNsaWNrPSJzZXRBY3RpdmVUYWIiCiAgICAgICAgICAgICAgZGF0YS10YWI9IjIiCiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9InRhYiIKICAgICAgICAgICAgICBocmVmPSIjIgogICAgICAgICAgICAgIHJvbGU9InRhYiIKICAgICAgICAgICAgICBhcmlhLXNlbGVjdGVkPSJmYWxzZSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIEhlYWRlcgogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgY2xhc3M9Im5hdi1saW5rIgogICAgICAgICAgICAgIHYtb246Y2xpY2s9InNldEFjdGl2ZVRhYiIKICAgICAgICAgICAgICBkYXRhLXRhYj0iMyIKICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0idGFiIgogICAgICAgICAgICAgIGhyZWY9IiMiCiAgICAgICAgICAgICAgcm9sZT0idGFiIgogICAgICAgICAgICAgIGFyaWEtc2VsZWN0ZWQ9ImZhbHNlIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgU3ViaGVhZGVyCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgICBjbGFzcz0ibmF2LWxpbmsiCiAgICAgICAgICAgICAgdi1vbjpjbGljaz0ic2V0QWN0aXZlVGFiIgogICAgICAgICAgICAgIGRhdGEtdGFiPSI0IgogICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJ0YWIiCiAgICAgICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgICAgICByb2xlPSJ0YWIiCiAgICAgICAgICAgICAgYXJpYS1zZWxlY3RlZD0iZmFsc2UiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICBDb250ZW50CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgPGEKICAgICAgICAgICAgICBjbGFzcz0ibmF2LWxpbmsiCiAgICAgICAgICAgICAgdi1vbjpjbGljaz0ic2V0QWN0aXZlVGFiIgogICAgICAgICAgICAgIGRhdGEtdGFiPSI1IgogICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJ0YWIiCiAgICAgICAgICAgICAgaHJlZj0iIyIKICAgICAgICAgICAgICByb2xlPSJ0YWIiCiAgICAgICAgICAgICAgYXJpYS1zZWxlY3RlZD0iZmFsc2UiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICBBc2lkZQogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgY2xhc3M9Im5hdi1saW5rIgogICAgICAgICAgICAgIHYtb246Y2xpY2s9InNldEFjdGl2ZVRhYiIKICAgICAgICAgICAgICBkYXRhLXRhYj0iNiIKICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0idGFiIgogICAgICAgICAgICAgIGhyZWY9IiMiCiAgICAgICAgICAgICAgcm9sZT0idGFiIgogICAgICAgICAgICAgIGFyaWEtc2VsZWN0ZWQ9ImZhbHNlIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgRm9vdGVyCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC91bD4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDwhLS1iZWdpbjo6Rm9ybS0tPgogICAgPGZvcm0gY2xhc3M9Imt0LWZvcm0ga3QtZm9ybS0tbGFiZWwtcmlnaHQiIHYtb246c3VibWl0PSJzdWJtaXQoJGV2ZW50KSI+CiAgICAgIDxkaXYgY2xhc3M9Imt0LXBvcnRsZXRfX2JvZHkiPgogICAgICAgIDxiLXRhYnMgY2xhc3M9Imt0LWhpZGUtdGFicyIgdi1tb2RlbD0idGFiSW5kZXgiPgogICAgICAgICAgPGItdGFiIGFjdGl2ZT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ia3Qtc2VjdGlvbiBrdC1tYXJnaW4tdC0zMCI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ia3Qtc2VjdGlvbl9fYm9keSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHJvdyI+CiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLWxnLTMgY29sLWZvcm0tbGFiZWwiPkhlYWRlciBTa2luOjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy05IGNvbC14bC00Ij4KICAgICAgICAgICAgICAgICAgICA8c2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY29uZmlnLmhlYWRlci5zZWxmLnNraW4iCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0ibGlnaHQiIHNlbGVjdGVkPSIiPgogICAgICAgICAgICAgICAgICAgICAgICBMaWdodChkZWZhdWx0KQogICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJkYXJrIj5EYXJrPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS10ZXh0IHRleHQtbXV0ZWQiPlNlbGVjdCBoZWFkZXIgc2tpbjwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCByb3ciPgogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1sZy0zIGNvbC1mb3JtLWxhYmVsIgogICAgICAgICAgICAgICAgICAgID5IZWFkZXIgTWVudSBTa2luOjwvbGFiZWwKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOSBjb2wteGwtNCI+CiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdAogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImNvbmZpZy5oZWFkZXIubWVudS5kZXNrdG9wLnN1Ym1lbnUuc2tpbiIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJsaWdodCIgc2VsZWN0ZWQ9IiIKICAgICAgICAgICAgICAgICAgICAgICAgPkxpZ2h0KGRlZmF1bHQpCiAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImRhcmsiPkRhcms8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXRleHQgdGV4dC1tdXRlZCI+U2VsZWN0IGhlYWRlciBza2luPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHJvdyI+CiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLWxnLTMgY29sLWZvcm0tbGFiZWwiCiAgICAgICAgICAgICAgICAgICAgPkxvZ28gQmFyIFNraW46PC9sYWJlbAogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy05IGNvbC14bC00Ij4KICAgICAgICAgICAgICAgICAgICA8c2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY29uZmlnLmJyYW5kLnNlbGYuc2tpbiIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJkYXJrIiBzZWxlY3RlZD0iIj5EYXJrKGRlZmF1bHQpPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJsaWdodCI+TGlnaHQ8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXRleHQgdGV4dC1tdXRlZCI+CiAgICAgICAgICAgICAgICAgICAgICBTZWxlY3QgbG9nbyBiYXIgc2tpbgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCByb3ciPgogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1sZy0zIGNvbC1mb3JtLWxhYmVsIj5Bc2lkZSBTa2luOjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy05IGNvbC14bC00Ij4KICAgICAgICAgICAgICAgICAgICA8c2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY29uZmlnLmFzaWRlLnNlbGYuc2tpbiIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJkYXJrIiBzZWxlY3RlZD0iIj5EYXJrKGRlZmF1bHQpPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJsaWdodCI+TGlnaHQ8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXRleHQgdGV4dC1tdXRlZCI+CiAgICAgICAgICAgICAgICAgICAgICBTZWxlY3QgbGVmdCBhc2lkZSBza2luCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9iLXRhYj4KCiAgICAgICAgICA8Yi10YWI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Imt0LXNlY3Rpb24ga3QtbWFyZ2luLXQtMzAiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imt0LXNlY3Rpb25fX2JvZHkiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCByb3ciPgogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1sZy0zIGNvbC1mb3JtLWxhYmVsIj4KICAgICAgICAgICAgICAgICAgICBEaXNwbGF5IFBhZ2UgVG9vbGJhcjoKICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTkgY29sLXhsLTQiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJrdC1zd2l0Y2gga3Qtc3dpdGNoLS1pY29uLWNoZWNrIj4KICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0iY2hlY2tib3giCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY29uZmlnLnRvb2xiYXIuZGlzcGxheSIKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tdGV4dCB0ZXh0LW11dGVkIj4KICAgICAgICAgICAgICAgICAgICAgIERpc3BsYXkgb3IgaGlkZSB0aGUgcGFnZSdzIHJpZ2h0IGNlbnRlciB0b29sYmFyKGRlbW9zCiAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2hlciwgZG9jdW1lbnRhdGlvbiBhbmQgcGFnZSBidWlsZGVyIGxpbmtzKQogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvYi10YWI+CgogICAgICAgICAgPGItdGFiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJrdC1zZWN0aW9uIGt0LW1hcmdpbi10LTMwIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJrdC1zZWN0aW9uX19ib2R5Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgcm93Ij4KICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtbGctMyBjb2wtZm9ybS1sYWJlbCI+CiAgICAgICAgICAgICAgICAgICAgRGVza3RvcCBGaXhlZCBIZWFkZXI6CiAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy05IGNvbC14bC00Ij4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ia3Qtc3dpdGNoIGt0LXN3aXRjaC0taWNvbi1jaGVjayI+CiAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImNoZWNrYm94IgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImNvbmZpZy5oZWFkZXIuc2VsZi5maXhlZC5kZXNrdG9wIgogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9IiIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS10ZXh0IHRleHQtbXV0ZWQiPgogICAgICAgICAgICAgICAgICAgICAgRW5hYmxlIGZpeGVkIGhlYWRlciBmb3IgZGVza3RvcCBtb2RlCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHJvdyI+CiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLWxnLTMgY29sLWZvcm0tbGFiZWwiPgogICAgICAgICAgICAgICAgICAgIE1vYmlsZSBGaXhlZCBIZWFkZXI6CiAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy05IGNvbC14bC00Ij4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ia3Qtc3dpdGNoIGt0LXN3aXRjaC0taWNvbi1jaGVjayI+CiAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImNoZWNrYm94IgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImNvbmZpZy5oZWFkZXIuc2VsZi5maXhlZC5tb2JpbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD0iIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXRleHQgdGV4dC1tdXRlZCI+CiAgICAgICAgICAgICAgICAgICAgICBFbmFibGUgZml4ZWQgaGVhZGVyIGZvciBtb2JpbGUgbW9kZQogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Imt0LXNlcGFyYXRvciBrdC1zZXBhcmF0b3ItLXNwYWNlLWxnIGt0LXNlcGFyYXRvci0tYm9yZGVyLWRhc2hlZCIKICAgICAgICAgICAgICAgID48L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHJvdyI+CiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLWxnLTMgY29sLWZvcm0tbGFiZWwiPgogICAgICAgICAgICAgICAgICAgIERpc3BsYXkgSGVhZGVyIE1lbnU6CiAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy05IGNvbC14bC00Ij4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ia3Qtc3dpdGNoIGt0LXN3aXRjaC0taWNvbi1jaGVjayI+CiAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImNoZWNrYm94IgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImNvbmZpZy5oZWFkZXIubWVudS5zZWxmLmRpc3BsYXkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD0iIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXRleHQgdGV4dC1tdXRlZCI+CiAgICAgICAgICAgICAgICAgICAgICBEaXNwbGF5IGhlYWRlciBtZW51CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCByb3ciPgogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1sZy0zIGNvbC1mb3JtLWxhYmVsIj4KICAgICAgICAgICAgICAgICAgICBIZWFkZXIgTWVudSBMYXlvdXQ6CiAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy05IGNvbC14bC00Ij4KICAgICAgICAgICAgICAgICAgICA8c2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY29uZmlnLmhlYWRlci5tZW51LnNlbGYubGF5b3V0IgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImRlZmF1bHQiIHNlbGVjdGVkPSIiPkRlZmF1bHQ8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InRhYiI+VGFiPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS10ZXh0IHRleHQtbXV0ZWQiPgogICAgICAgICAgICAgICAgICAgICAgU2VsZWN0IGhlYWRlciBtZW51IGxheW91dCBzdHlsZQogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgcm93Ij4KICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtbGctMyBjb2wtZm9ybS1sYWJlbCI+CiAgICAgICAgICAgICAgICAgICAgSGVhZGVyIE1lbnUgQXJyb3dzOgogICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOSBjb2wteGwtNCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imt0LXN3aXRjaCBrdC1zd2l0Y2gtLWljb24tY2hlY2siPgogICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJjaGVja2JveCIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJjb25maWcuaGVhZGVyLm1lbnUuc2VsZlsncm9vdC1hcnJvdyddIgogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXRleHQgdGV4dC1tdXRlZCI+CiAgICAgICAgICAgICAgICAgICAgICBFbmFibGUgaGVhZGVyIG1lbnUgcm9vdCBsaW5rIGFycm93cwogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Imt0LXNlcGFyYXRvciBrdC1zZXBhcmF0b3ItLXNwYWNlLWxnIGt0LXNlcGFyYXRvci0tYm9yZGVyLWRhc2hlZCIKICAgICAgICAgICAgICAgID48L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHJvdyI+CiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLWxnLTMgY29sLWZvcm0tbGFiZWwiPgogICAgICAgICAgICAgICAgICAgIEhlYWRlciBTZWFyY2ggTGF5b3V0OgogICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOSBjb2wteGwtNCI+CiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdAogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImNvbmZpZy5oZWFkZXIudG9wYmFyLnNlYXJjaC5sYXlvdXQiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0ib2ZmY2FudmFzIj5PZmZjYW52YXM8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImRyb3Bkb3duIiBzZWxlY3RlZD0iIj5Ecm9wZG93bjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tdGV4dCB0ZXh0LW11dGVkIj4KICAgICAgICAgICAgICAgICAgICAgIFNlbGVjdCBoZWFkZXIgbWVudSBsYXlvdXQgc3R5bGUKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2ItdGFiPgoKICAgICAgICAgIDxiLXRhYj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ia3Qtc2VjdGlvbiBrdC1tYXJnaW4tdC0zMCI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ia3Qtc2VjdGlvbl9fYm9keSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHJvdyI+CiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLWxnLTMgY29sLWZvcm0tbGFiZWwiPgogICAgICAgICAgICAgICAgICAgIERpc3BsYXkgU3ViaGVhZGVyOgogICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOSBjb2wteGwtNCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imt0LXN3aXRjaCBrdC1zd2l0Y2gtLWljb24tY2hlY2siPgogICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJjaGVja2JveCIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJjb25maWcuc3ViaGVhZGVyLmRpc3BsYXkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD0iIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXRleHQgdGV4dC1tdXRlZCI+RGlzcGxheSBzdWJoZWFkZXI8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgcm93Ij4KICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtbGctMyBjb2wtZm9ybS1sYWJlbCI+CiAgICAgICAgICAgICAgICAgICAgRml4ZWQgU3ViaGVhZGVyOgogICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOSBjb2wteGwtNCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imt0LXN3aXRjaCBrdC1zd2l0Y2gtLWljb24tY2hlY2siPgogICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJjaGVja2JveCIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJjb25maWcuc3ViaGVhZGVyLmZpeGVkIgogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9IiIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS10ZXh0IHRleHQtbXV0ZWQiPgogICAgICAgICAgICAgICAgICAgICAgRW5hYmxlIGZpeGVkKHN0aWNreSkgc3ViaGVhZGVyLiBSZXF1aXJlcwogICAgICAgICAgICAgICAgICAgICAgPGNvZGU+U29saWQ8L2NvZGU+IHN1YmhlYWRlciBzdHlsZS4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgcm93Ij4KICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtbGctMyBjb2wtZm9ybS1sYWJlbCI+V2lkdGg6PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTkgY29sLXhsLTQiPgogICAgICAgICAgICAgICAgICAgIDxzZWxlY3QKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJjb25maWcuc3ViaGVhZGVyLndpZHRoIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImZsdWlkIiBzZWxlY3RlZD0iIj5GbHVpZDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iZml4ZWQiPkZpeGVkPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS10ZXh0IHRleHQtbXV0ZWQiPgogICAgICAgICAgICAgICAgICAgICAgU2VsZWN0IGxheW91dCB3aWR0aCB0eXBlLgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCByb3ciPgogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1sZy0zIGNvbC1mb3JtLWxhYmVsIgogICAgICAgICAgICAgICAgICAgID5TdWJoZWFkZXIgU3R5bGU6PC9sYWJlbAogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy05IGNvbC14bC00Ij4KICAgICAgICAgICAgICAgICAgICA8c2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY29uZmlnLnN1YmhlYWRlci5zdHlsZSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJ0cmFuc3BhcmVudCI+VHJhbnNwYXJlbnQ8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InNvbGlkIiBzZWxlY3RlZD0iIj5Tb2xpZDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tdGV4dCB0ZXh0LW11dGVkIj4KICAgICAgICAgICAgICAgICAgICAgIFNlbGVjdCBzdWJoZWFkZXIgc3R5bGUKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgcm93Ij4KICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtbGctMyBjb2wtZm9ybS1sYWJlbCIKICAgICAgICAgICAgICAgICAgICA+U3ViaGVhZGVyIExheW91dDo8L2xhYmVsCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTkgY29sLXhsLTQiPgogICAgICAgICAgICAgICAgICAgIDxzZWxlY3QKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJjb25maWcuc3ViaGVhZGVyLmxheW91dCIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJzdWJoZWFkZXItdjEiIHNlbGVjdGVkPSIiPgogICAgICAgICAgICAgICAgICAgICAgICBTdWJoZWFkZXIgdjEKICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tdGV4dCB0ZXh0LW11dGVkIj4KICAgICAgICAgICAgICAgICAgICAgIFNlbGVjdCBzdWJoZWFkZXIgbGF5b3V0CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9iLXRhYj4KCiAgICAgICAgICA8Yi10YWI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Imt0LXNlY3Rpb24ga3QtbWFyZ2luLXQtMzAiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imt0LXNlY3Rpb25fX2JvZHkiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCByb3ciPgogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1sZy0zIGNvbC1mb3JtLWxhYmVsIj5XaWR0aDo8L2xhYmVsPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOSBjb2wteGwtNCI+CiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdAogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImNvbmZpZy5jb250ZW50LndpZHRoIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImZsdWlkIj5GbHVpZDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iZml4ZWQiIHNlbGVjdGVkPSIiPkZpeGVkPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS10ZXh0IHRleHQtbXV0ZWQiPgogICAgICAgICAgICAgICAgICAgICAgU2VsZWN0IGxheW91dCB3aWR0aCB0eXBlLgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvYi10YWI+CgogICAgICAgICAgPGItdGFiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJrdC1zZWN0aW9uIGt0LW1hcmdpbi10LTMwIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJrdC1zZWN0aW9uX19ib2R5Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgcm93Ij4KICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtbGctMyBjb2wtZm9ybS1sYWJlbCI+RGlzcGxheTo8L2xhYmVsPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOSBjb2wteGwtNCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imt0LXN3aXRjaCBrdC1zd2l0Y2gtLWljb24tY2hlY2siPgogICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJjaGVja2JveCIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJjb25maWcuYXNpZGUuc2VsZi5kaXNwbGF5IgogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9IiIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS10ZXh0IHRleHQtbXV0ZWQiPkRpc3BsYXkgYXNpZGU8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgcm93Ij4KICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtbGctMyBjb2wtZm9ybS1sYWJlbCI+Rml4ZWQ6PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTkgY29sLXhsLTQiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJrdC1zd2l0Y2gga3Qtc3dpdGNoLS1pY29uLWNoZWNrIj4KICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0iY2hlY2tib3giCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY29uZmlnLmFzaWRlLnNlbGYuZml4ZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD0iIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXRleHQgdGV4dC1tdXRlZCI+CiAgICAgICAgICAgICAgICAgICAgICBTZXQgZml4ZWQgYXNpZGUgbGF5b3V0CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHJvdyI+CiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLWxnLTMgY29sLWZvcm0tbGFiZWwiPk1pbmltaXplOjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy05IGNvbC14bC00Ij4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ia3Qtc3dpdGNoIGt0LXN3aXRjaC0taWNvbi1jaGVjayI+CiAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImNoZWNrYm94IgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImNvbmZpZy5hc2lkZS5zZWxmLm1pbmltaXplLnRvZ2dsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPSIiCiAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tdGV4dCB0ZXh0LW11dGVkIj4KICAgICAgICAgICAgICAgICAgICAgIEFsbG93IGFzaWRlIG1pbmltaXppbmcKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgcm93Ij4KICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtbGctMyBjb2wtZm9ybS1sYWJlbCI+CiAgICAgICAgICAgICAgICAgICAgRGVmYXVsdCBNaW5pbWl6ZToKICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTkgY29sLXhsLTQiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJrdC1zd2l0Y2gga3Qtc3dpdGNoLS1pY29uLWNoZWNrIj4KICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0iY2hlY2tib3giCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY29uZmlnLmFzaWRlLnNlbGYubWluaW1pemUuZGVmYXVsdCIKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS10ZXh0IHRleHQtbXV0ZWQiPgogICAgICAgICAgICAgICAgICAgICAgU2V0IGFzaWRlIG1pbmltaXplZCBieSBkZWZhdWx0CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHJvdyI+CiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLWxnLTMgY29sLWZvcm0tbGFiZWwiPgogICAgICAgICAgICAgICAgICAgIFN1Ym1lbnUgVG9nZ2xlOgogICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOSBjb2wteGwtNCI+CiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdAogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImNvbmZpZy5hc2lkZS5tZW51LmRyb3Bkb3duIgogICAgICAgICAgICAgICAgICAgICAgQGNoYW5nZT0ib25DaGFuZ2VBc2lkZU1lbnVEcm9wZG93bigkZXZlbnQpIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InRydWUiPkRyb3Bkb3duPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJmYWxzZSIgc2VsZWN0ZWQ9IiI+QWNjb3JkaW9uPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS10ZXh0IHRleHQtbXV0ZWQiPgogICAgICAgICAgICAgICAgICAgICAgU2VsZWN0IHN1Ym1lbnUgdG9nZ2xlIG1vZGUod29ya3Mgb25seSB3aGVuCiAgICAgICAgICAgICAgICAgICAgICA8Y29kZT5GaXhlZCBNb2RlPC9jb2RlPiBpcyBkaXNhYmxlZCkKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2ItdGFiPgoKICAgICAgICAgIDxiLXRhYj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ia3Qtc2VjdGlvbiBrdC1tYXJnaW4tdC0zMCI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ia3Qtc2VjdGlvbl9fYm9keSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHJvdyI+CiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLWxnLTMgY29sLWZvcm0tbGFiZWwiPkZpeGVkIEZvb3Rlcjo8L2xhYmVsPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOSBjb2wteGwtNCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imt0LXN3aXRjaCBrdC1zd2l0Y2gtLWljb24tY2hlY2siPgogICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJjaGVja2JveCIKICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJjb25maWcuZm9vdGVyLnNlbGYuZml4ZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tdGV4dCB0ZXh0LW11dGVkIj5TZXQgZml4ZWQgZm9vdGVyPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHJvdyI+CiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLWxnLTMgY29sLWZvcm0tbGFiZWwiPldpZHRoOjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy05IGNvbC14bC00Ij4KICAgICAgICAgICAgICAgICAgICA8c2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY29uZmlnLmZvb3Rlci5zZWxmLndpZHRoIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImZsdWlkIiBzZWxlY3RlZD0iIj5GbHVpZDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iZml4ZWQiPkZpeGVkPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS10ZXh0IHRleHQtbXV0ZWQiPgogICAgICAgICAgICAgICAgICAgICAgU2VsZWN0IGxheW91dCB3aWR0aCB0eXBlLgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvYi10YWI+CiAgICAgICAgPC9iLXRhYnM+CiAgICAgIDwvZGl2PgoKICAgICAgPGRpdiBjbGFzcz0ia3QtcG9ydGxldF9fZm9vdCI+CiAgICAgICAgPGRpdiBjbGFzcz0ia3QtZm9ybV9fYWN0aW9ucyI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy05Ij4KICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biBidG4tYnJhbmQgbXItMiI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGEgbGEtZXllIj48L2k+CiAgICAgICAgICAgICAgICBQcmV2aWV3CiAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgPGJ1dHRvbiB2LW9uOmNsaWNrPSJyZXNldCgkZXZlbnQpIiBjbGFzcz0iYnRuIGJ0bi1zZWNvbmRhcnkiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhIGxhLXJlY3ljbGUiPjwvaT4KICAgICAgICAgICAgICAgIFJlc2V0CiAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9mb3JtPgogICAgPCEtLWVuZDo6Rm9ybS0tPgogIDwvZGl2Pgo8L2Rpdj4K"},null]}