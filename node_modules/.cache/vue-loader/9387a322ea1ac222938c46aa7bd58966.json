{"remainingRequest":"/Users/davislin/DavisLin/Case/erp/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/davislin/DavisLin/Case/erp/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Users/davislin/DavisLin/Case/erp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/davislin/DavisLin/Case/erp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/davislin/DavisLin/Case/erp/node_modules/vue-svg-inline-loader/dist/index.min.js!/Users/davislin/DavisLin/Case/erp/src/views/partials/layout/QuickPanel.vue?vue&type=template&id=3fcb2ece&","dependencies":[{"path":"/Users/davislin/DavisLin/Case/erp/src/views/partials/layout/QuickPanel.vue","mtime":1580289190000},{"path":"/Users/davislin/DavisLin/Case/erp/node_modules/cache-loader/dist/cjs.js","mtime":1581314282653},{"path":"/Users/davislin/DavisLin/Case/erp/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1588841263729},{"path":"/Users/davislin/DavisLin/Case/erp/node_modules/vuetify-loader/lib/loader.js","mtime":1588922639593},{"path":"/Users/davislin/DavisLin/Case/erp/node_modules/cache-loader/dist/cjs.js","mtime":1581314282653},{"path":"/Users/davislin/DavisLin/Case/erp/node_modules/vue-loader/lib/index.js","mtime":1588841263729},{"path":"/Users/davislin/DavisLin/Case/erp/node_modules/vue-svg-inline-loader/dist/index.min.js","mtime":1588922639533}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}